name: Makefile CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  compile:
    name: Compile OS
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Update System
      run: sudo apt-get update

    - name: Install Dependencies
      run: sudo apt-get install xorriso mtools genisoimage ovmf nasm doxygen -y

    - name: Cache cross Folder
      id: cache-cross
      uses: actions/cache@v3
      with:
        path: tools/cross
        key: ${{ runner.os }}-cross-${{ hashFiles('tools/Makefile') }}

    - name: Cache gnu-efi Folder
      id: cache-gnuefi
      uses: actions/cache@v3
      with:
        path: boot/UEFI/gnu-efi
        key: ${{ runner.os }}-gnuefi-${{ hashFiles('boot/Makefile') }}

    - name: Install GNU Binutils & GNU Compiler Collection
      if: steps.cache-cross.outputs.cache-hit != 'true'
      run: sudo apt-get install build-essential bison flex libgmp3-dev libmpc-dev libmpfr-dev texinfo -y

    - name: Downloading Fonts & Compiling initrd.c
      run: make tools_workflow0

    - name: Cloning Limine
      run: make tools_workflow1

    - name: Clone and Compile GNU Binutils
      if: steps.cache-cross.outputs.cache-hit != 'true'
      run: make tools_workflow2

    - name: Clone and Compile GNU Compiler Collection
      if: steps.cache-cross.outputs.cache-hit != 'true'
      run: make tools_workflow3

    - name: Install MinGW compiler
      run: sudo apt-get install make gcc-mingw-w64-x86-64 gcc-mingw-w64-i686 mingw-w64 -y

    - name: Get GNU-EFI source code and compile it
      if: steps.cache-gnuefi.outputs.cache-hit != 'true'
      run: make tools_workflow4

    - name: Build Bootloader
      run: make build_bootloader

    - name: Build Kernel
      run: make build_kernel

    - name: Build LibC
      run: make build_libc

    - name: Build User-Space Applications
      run: make build_userspace

    - name: Build ISO Image
      run: make build_image

    - name: Upload Artifact
      uses: actions/upload-artifact@v3.0.0
      with:
        name: FennixProject
        path: FennixProject.iso

  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    needs: compile
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}

    - name: Build1
      run: sudo apt-get update && sudo apt-get install xorriso mtools genisoimage ovmf nasm doxygen make gcc-mingw-w64-x86-64 gcc-mingw-w64-i686 mingw-w64 build-essential bison flex libgmp3-dev libmpc-dev libmpfr-dev texinfo -y

    - name: Cache cross Folder
      id: cache-cross
      uses: actions/cache@v3
      with:
        path: tools/cross
        key: ${{ runner.os }}-cross-${{ hashFiles('tools/Makefile') }}

    - name: Cache gnu-efi Folder
      id: cache-gnuefi
      uses: actions/cache@v3
      with:
        path: boot/UEFI/gnu-efi
        key: ${{ runner.os }}-gnuefi-${{ hashFiles('boot/Makefile') }}

    - name: Clone and Compile GNU Binutils
      if: steps.cache-cross.outputs.cache-hit != 'true'
      run: make tools_workflow2

    - name: Clone and Compile GNU Compiler Collection
      if: steps.cache-cross.outputs.cache-hit != 'true'
      run: make tools_workflow3

    - name: Get GNU-EFI source code and compile it
      if: steps.cache-gnuefi.outputs.cache-hit != 'true'
      run: make tools_workflow4

    - name: Build Bootloader
      run: |
        make tools_workflow0
        make tools_workflow1
        make build_bootloader
        make build_kernel
        make build_libc
        make build_userspace
        make build_image

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
