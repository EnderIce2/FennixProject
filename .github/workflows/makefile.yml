name: Build OS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  buildcompiler:
    name: Build Cross-Compiler (GCC)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Update System
      run: sudo apt-get update

    - name: Cache cross Folder
      id: cache-cross
      uses: actions/cache@v3
      with:
        path: tools/cross
        key: ${{ runner.os }}-cross-${{ hashFiles('tools/Makefile') }}

    - name: Install GCC Dependencies
      if: steps.cache-cross.outputs.cache-hit != 'true'
      run: sudo apt install build-essential bison flex libgmp3-dev libmpc-dev libmpfr-dev texinfo libzstd-dev libisl-dev autoconf m4 automake gettext gperf dejagnu guile-* expect tcl autogen tex-common sphinx-common git ssh diffutils patch -y

    - name: Clone All
      if: steps.cache-cross.outputs.cache-hit != 'true'
      run: make tools_workflow2

    - name: Compile GCC AMD64
      if: steps.cache-cross.outputs.cache-hit != 'true'
      run: make tools_workflow3

    - name: Compile GCC i686
      if: steps.cache-cross.outputs.cache-hit != 'true'
      run: make tools_workflow4

    - name: Compile GCC aarch64
      if: steps.cache-cross.outputs.cache-hit != 'true'
      run: make tools_workflow5

  compilegnuefi:
    name: Build GNU-EFI
    runs-on: ubuntu-latest
    needs: buildcompiler
    steps:
    - uses: actions/checkout@v3

    - name: Update System
      run: sudo apt-get update

    - name: Cache gnu-efi Folder
      id: cache-gnuefi
      uses: actions/cache@v3
      with:
        path: boot/UEFI/gnu-efi
        key: ${{ runner.os }}-gnuefi-${{ hashFiles('boot/Makefile') }}

    - name: Install MinGW compiler
      run: sudo apt-get install make gcc-mingw-w64-x86-64 gcc-mingw-w64-i686 mingw-w64 -y

    - name: Get GNU-EFI source code and compile it
      if: steps.cache-gnuefi.outputs.cache-hit != 'true'
      run: make tools_workflow6

  compile64:
    name: Build AMD64
    runs-on: ubuntu-latest
    needs: compilegnuefi
    steps:
    - uses: actions/checkout@v3
  
    - name: Update System
      run: sudo apt-get update

    - name: Install Required Tools
      run: sudo apt-get install xorriso mtools genisoimage ovmf nasm doxygen -y

    - name: Install MinGW compiler
      run: sudo apt-get install make gcc-mingw-w64-x86-64 gcc-mingw-w64-i686 mingw-w64 -y

    - name: Cache cross Folder
      id: cache-cross
      uses: actions/cache@v3
      with:
        path: tools/cross
        key: ${{ runner.os }}-cross-${{ hashFiles('tools/Makefile') }}

    - name: Cache gnu-efi Folder
      id: cache-gnuefi
      uses: actions/cache@v3
      with:
        path: boot/UEFI/gnu-efi
        key: ${{ runner.os }}-gnuefi-${{ hashFiles('boot/Makefile') }}

    - name: Downloading Fonts & Compiling initrd.c, readethernet.c and e.cpp
      run: make tools_workflow0

    - name: Cloning Limine
      run: make tools_workflow1

    - name: Build Bootloader
      run: make build_bootloader

    - name: Build Kernel
      run: make build_kernel

    - name: Build LibC
      run: make build_libc

    - name: Build User-Space Applications
      run: make build_userspace

    - name: Build ISO Image
      run: make build_image

    - name: Upload Artifact
      uses: actions/upload-artifact@v3.0.0
      with:
        name: FennixProject-amd64
        path: FennixProject.iso

  compile32:
    name: Build i686
    runs-on: ubuntu-latest
    needs: compilegnuefi
    steps:
    - uses: actions/checkout@v3
  
    - name: Update System
      run: sudo apt-get update

    - name: Install Required Tools
      run: sudo apt-get install xorriso mtools genisoimage ovmf nasm doxygen -y

    - name: Install MinGW compiler
      run: sudo apt-get install make gcc-mingw-w64-x86-64 gcc-mingw-w64-i686 mingw-w64 -y

    - name: Cache cross Folder
      id: cache-cross
      uses: actions/cache@v3
      with:
        path: tools/cross
        key: ${{ runner.os }}-cross-${{ hashFiles('tools/Makefile') }}

    - name: Cache gnu-efi Folder
      id: cache-gnuefi
      uses: actions/cache@v3
      with:
        path: boot/UEFI/gnu-efi
        key: ${{ runner.os }}-gnuefi-${{ hashFiles('boot/Makefile') }}

    - name: Configure Makefile.conf
      run: sed 's/OSARCH = amd64/OSARCH = i686/g' Makefile.conf

    - name: Downloading Fonts & Compiling initrd.c, readethernet.c and e.cpp
      run: make tools_workflow0

    - name: Cloning Limine
      run: make tools_workflow1

    - name: Build Bootloader
      run: make build_bootloader

    - name: Build Kernel
      run: make build_kernel

    - name: Build LibC
      run: make build_libc

    - name: Build User-Space Applications
      run: make build_userspace

    - name: Build ISO Image
      run: make build_image

    - name: Upload Artifact
      uses: actions/upload-artifact@v3.0.0
      with:
        name: FennixProject-i686
        path: FennixProject.iso

  compilearm64:
    name: Build aarch64
    runs-on: ubuntu-latest
    needs: compilegnuefi
    steps:
    - uses: actions/checkout@v3
  
    - name: Update System
      run: sudo apt-get update

    - name: Install Required Tools
      run: sudo apt-get install xorriso mtools genisoimage ovmf nasm doxygen -y

    - name: Install MinGW compiler
      run: sudo apt-get install make gcc-mingw-w64-x86-64 gcc-mingw-w64-i686 mingw-w64 -y

    - name: Cache cross Folder
      id: cache-cross
      uses: actions/cache@v3
      with:
        path: tools/cross
        key: ${{ runner.os }}-cross-${{ hashFiles('tools/Makefile') }}

    - name: Cache gnu-efi Folder
      id: cache-gnuefi
      uses: actions/cache@v3
      with:
        path: boot/UEFI/gnu-efi
        key: ${{ runner.os }}-gnuefi-${{ hashFiles('boot/Makefile') }}

    - name: Configure Makefile.conf
      run: sed 's/OSARCH = amd64/OSARCH = aarch64/g' Makefile.conf

    - name: Downloading Fonts & Compiling initrd.c, readethernet.c and e.cpp
      run: make tools_workflow0

    - name: Cloning Limine
      run: make tools_workflow1

    - name: Build Bootloader
      run: make build_bootloader

    - name: Build Kernel
      run: make build_kernel

    - name: Build LibC
      run: make build_libc

    - name: Build User-Space Applications
      run: make build_userspace

    - name: Build ISO Image
      run: make build_image

    - name: Upload Artifact
      uses: actions/upload-artifact@v3.0.0
      with:
        name: FennixProject-aarch64
        path: FennixProject.iso
