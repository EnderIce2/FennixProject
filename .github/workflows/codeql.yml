# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL"

on:
  push:
    branches: [ "main" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
  schedule:
    - cron: '41 21 * * 3'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.
        
        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

        
    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    # - name: Autobuild
    #   uses: github/codeql-action/autobuild@v2

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines. 
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    # - run: |
    #   echo "Run, Build Application using script"
    #   ./location_of_script_within_repo/buildscript.sh
    
    - name: Update System
      run: sudo apt-get update

    - name: Install Dependencies
      run: sudo apt-get install xorriso mtools genisoimage ovmf nasm doxygen -y

    - name: Cache cross Folder
      id: cache-cross
      uses: actions/cache@v3
      with:
        path: tools/cross
        key: ${{ runner.os }}-cross-${{ hashFiles('tools/Makefile') }}

    - name: Cache gnu-efi Folder
      id: cache-gnuefi
      uses: actions/cache@v3
      with:
        path: boot/UEFI/gnu-efi
        key: ${{ runner.os }}-gnuefi-${{ hashFiles('boot/Makefile') }}

    - name: Install GNU Binutils & GNU Compiler Collection
      if: steps.cache-cross.outputs.cache-hit != 'true'
      run: sudo apt-get install build-essential bison flex libgmp3-dev libmpc-dev libmpfr-dev texinfo -y

    - name: Downloading Fonts & Compiling initrd.c
      run: make tools_workflow0

    - name: Cloning Limine
      run: make tools_workflow1

    - name: Clone and Compile GNU Binutils
      if: steps.cache-cross.outputs.cache-hit != 'true'
      run: make tools_workflow2

    - name: Clone and Compile GNU Compiler Collection
      if: steps.cache-cross.outputs.cache-hit != 'true'
      run: make tools_workflow3

    - name: Install MinGW compiler
      run: sudo apt-get install make gcc-mingw-w64-x86-64 gcc-mingw-w64-i686 mingw-w64 -y

    - name: Get GNU-EFI source code and compile it
      if: steps.cache-gnuefi.outputs.cache-hit != 'true'
      run: make tools_workflow4

    - name: Build Bootloader
      run: make build_bootloader

    - name: Build Kernel
      run: make build_kernel

    - name: Build LibC
      run: make build_libc

    - name: Build User-Space Applications
      run: make build_userspace

    - name: Build ISO Image
      run: make build_image

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
